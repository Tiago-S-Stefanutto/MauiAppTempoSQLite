<?xml version="1.0" encoding="utf-8" ?>
<!-- 
    Declaração XML padrão especificando versão e codificação
    Necessária para todos os arquivos XAML 
-->
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="MauiAppTempoSQLite.MainPage">
    <!-- 
        ContentPage é o container principal da tela
        xmlns define o namespace padrão do .NET MAUI
        xmlns:x define extensões XAML (como x:Name, x:Class)
        x:Class conecta este XAML com a classe MainPage no code-behind
    -->

    <!-- SEÇÃO DE RECURSOS E ESTILOS -->
    <ContentPage.Resources>
        <ResourceDictionary>
            <!-- 
                ResourceDictionary agrupa estilos, cores e recursos reutilizáveis
                Permite definir estilos globais para a página
            -->

            <!-- Estilo global para todos os Labels da página -->
            <Style TargetType="Label">
                <!-- Centraliza verticalmente o texto em todos os Labels -->
                <Setter Property="VerticalTextAlignment" Value="Center" />
            </Style>

            <!-- Estilo específico para o cabeçalho da ListView -->
            <Style x:Key="cabecalho_listview" TargetType="Grid">
                <!-- 
                    x:Key permite referenciar este estilo pelo nome
                    AppThemeBinding muda a cor baseada no tema (claro/escuro)
                    StaticResource referencia cores definidas no tema do app
                -->
                <Setter Property="BackgroundColor"
                    Value="{AppThemeBinding Light={StaticResource Gray100}, 
                                        Dark={StaticResource Primary}}" />
            </Style>
        </ResourceDictionary>
    </ContentPage.Resources>

    <!-- ESTRUTURA PRINCIPAL DA INTERFACE -->
    <ScrollView>
        <!-- 
            ScrollView permite rolagem quando o conteúdo excede o tamanho da tela
            Importante para diferentes tamanhos de dispositivos
        -->

        <VerticalStackLayout Padding="30,0" Spacing="25">
            <!-- 
                VerticalStackLayout organiza elementos verticalmente
                Padding="30,0" = 30 pixels nas laterais, 0 em cima/baixo
                Spacing="25" = 25 pixels de espaço entre cada elemento filho
            -->

            <!-- SEÇÃO DE BUSCA DE PREVISÃO -->
            <StackLayout Orientation="Horizontal">
                <!-- Layout horizontal para SearchBar + Button na mesma linha -->

                <SearchBar x:Name="txt_cidade" 
                          HorizontalOptions="FillAndExpand" 
                          Margin="0, 0, 10, 0" />
                <!-- 
                    x:Name="txt_cidade" permite acessar no code-behind
                    HorizontalOptions="FillAndExpand" ocupa todo espaço disponível
                    Margin="0, 0, 10, 0" = margem direita de 10 pixels
                -->

                <Button Text="Buscar Previsão" Clicked="Button_Clicked" />
                <!-- 
                    Clicked="Button_Clicked" conecta ao método no code-behind
                    Será executado quando o usuário tocar no botão
                -->
            </StackLayout>

            <!-- Label para exibir resultados ou mensagens -->
            <Label x:Name="lbl_res" />
            <!-- x:Name permite modificar o texto via code-behind -->

            <!-- SEÇÃO DE LISTAGEM E FILTROS -->
            <StackLayout>

                <!-- BARRA DE FILTROS -->
                <StackLayout Orientation="Horizontal">
                    <!-- Layout horizontal para filtros na mesma linha -->

                    <SearchBar x:Name="txt_search"
                               HorizontalOptions="FillAndExpand"
                              Placeholder="Busca de Previsões"
                              TextChanged="txt_search_TextChanged">
                        <!-- 
                            txt_search_TextChanged executado sempre que o texto muda
                            Placeholder mostra texto de ajuda quando vazio
                        -->

                        <SearchBar.Margin>
                            <!-- Margens específicas por plataforma -->
                            <OnPlatform x:TypeArguments="Thickness">
                                <!-- Android: margem esquerda negativa (-15) -->
                                <On Platform="Android" Value="-15, 0, 0, 0" />
                                <!-- UWP: margens laterais de 5 pixels -->
                                <On Platform="UWP" Value="5, 0, 5, 0" />
                            </OnPlatform>
                            <!-- 
                                OnPlatform permite valores diferentes por SO
                                Compensa diferenças visuais entre plataformas
                            -->
                        </SearchBar.Margin>
                    </SearchBar>

                    <!-- DatePickers para filtrar por período -->
                    <DatePicker />
                    <DatePicker />
                    <!-- 
                        ATENÇÃO: DatePickers sem x:Name não podem ser acessados no code-behind
                        Provavelmente planejados para filtro por data mas não implementados
                    -->

                </StackLayout>

                <!-- LISTA DE PREVISÕES -->
                <Frame Padding="0" Margin="10" VerticalOptions="FillAndExpand">
                    <!-- 
                        Frame cria uma borda visual ao redor da ListView
                        VerticalOptions="FillAndExpand" ocupa todo espaço vertical disponível
                    -->

                    <ListView x:Name="lst_previsoes_tempo"
                              IsPullToRefreshEnabled="True"
                              Refreshing="lst_previsoes_tempo_Refreshing"
                              ItemSelected="lst_previsoes_tempo_ItemSelected">
                        <!-- 
                            ListView exibe lista de itens com scroll automático
                            IsPullToRefreshEnabled="True" permite "puxar para atualizar"
                            Refreshing e ItemSelected conectam a eventos no code-behind
                        -->

                        <!-- CABEÇALHO DA LISTA -->
                        <ListView.Header>
                            <Grid ColumnDefinitions="*, *, *, *, *, *"                                  
                                  Style="{StaticResource Key=cabecalho_listview}">
                                <!-- 
                                    Grid com 6 colunas de tamanho equal (*)
                                    Style referencia o estilo definido nos recursos
                                    StaticResource busca recurso pelo nome/chave
                                -->

                                <!-- Labels do cabeçalho, cada um em uma coluna -->
                                <Label Grid.Column="0" Text="ID" Padding="5" FontAttributes="Bold" />
                                <Label Grid.Column="1" Text="Cidade" Padding="5" FontAttributes="Bold" />
                                <Label Grid.Column="2" Text="Data" Padding="5" FontAttributes="Bold" />
                                <Label Grid.Column="3" Text="Previsão" FontAttributes="Bold" />
                                <Label Grid.Column="4" Text="Máxima" FontAttributes="Bold" />
                                <Label Grid.Column="5" Text="Min" FontAttributes="Bold" />
                                <!-- 
                                    Grid.Column especifica em qual coluna posicionar o elemento
                                    FontAttributes="Bold" deixa o texto em negrito
                                    Padding="5" adiciona espaçamento interno
                                -->
                            </Grid>
                        </ListView.Header>

                        <!-- TEMPLATE PARA CADA ITEM DA LISTA -->
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <!-- 
                                    DataTemplate define como cada item da lista será exibido
                                    É reutilizado para todos os objetos Tempo na lista
                                -->

                                <ViewCell>
                                    <!-- ViewCell representa uma linha da ListView -->

                                    <!-- MENU DE CONTEXTO -->
                                    <ViewCell.ContextActions>
                                        <!-- Menu que aparece com toque longo ou swipe -->
                                        <MenuItem Text="Remover" Clicked="MenuItem_Clicked" />
                                        <!-- 
                                            MenuItem cria opção no menu de contexto
                                            Clicked conecta ao método de remoção no code-behind
                                        -->
                                    </ViewCell.ContextActions>

                                    <!-- LAYOUT DOS DADOS -->
                                    <Grid ColumnDefinitions="*, *, *, *, *, *">
                                        <!-- Grid com 6 colunas para organizar os dados -->

                                        <!-- Labels com Data Binding para propriedades do objeto Tempo -->
                                        <Label Grid.Column="0" Text="{Binding Id}" Padding="5" />
                                        <Label Grid.Column="1" Text="{Binding Cidade}" Padding="5" />
                                        <Label Grid.Column="2" Text="{Binding DataConsulta}" Padding="5" />
                                        <Label Grid.Column="3" Text="{Binding description}" />
                                        <Label Grid.Column="4" Text="{Binding temp_max}" />
                                        <Label Grid.Column="5" Text="{Binding temp_min}" />
                                        <!-- 
                                            {Binding PropertyName} conecta o Text à propriedade do objeto
                                            MVVM pattern: View se conecta automaticamente ao Model
                                            Quando dados mudam, interface atualiza automaticamente
                                        -->
                                    </Grid>
                                </ViewCell>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                </Frame>
            </StackLayout>
        </VerticalStackLayout>
    </ScrollView>

</ContentPage>